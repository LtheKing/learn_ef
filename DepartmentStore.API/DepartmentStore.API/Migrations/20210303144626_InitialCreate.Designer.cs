// <auto-generated />
using System;
using DepartmentStore.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DepartmentStore.API.Migrations
{
    [DbContext(typeof(Exercises2Context))]
    [Migration("20210303144626_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DepartmentStore.API.Data.AccTransaction", b =>
                {
                    b.Property<decimal>("TxnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(19,0)")
                        .HasColumnName("TXN_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("ACCOUNT_ID");

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("AMOUNT");

                    b.Property<int?>("ExecutionBranchId")
                        .HasColumnType("int")
                        .HasColumnName("EXECUTION_BRANCH_ID");

                    b.Property<DateTime>("FundsAvailDate")
                        .HasColumnType("datetime")
                        .HasColumnName("FUNDS_AVAIL_DATE");

                    b.Property<int?>("TellerEmpId")
                        .HasColumnType("int")
                        .HasColumnName("TELLER_EMP_ID");

                    b.Property<DateTime>("TxnDate")
                        .HasColumnType("datetime")
                        .HasColumnName("TXN_DATE");

                    b.Property<string>("TxnTypeCd")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TXN_TYPE_CD");

                    b.HasKey("TxnId")
                        .HasName("PK__ACC_TRAN__C512E7E203317E3D");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExecutionBranchId");

                    b.HasIndex("TellerEmpId");

                    b.ToTable("ACC_TRANSACTION");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ACCOUNT_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AvailBalance")
                        .HasColumnType("float")
                        .HasColumnName("AVAIL_BALANCE");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CLOSE_DATE");

                    b.Property<int?>("CustId")
                        .HasColumnType("int")
                        .HasColumnName("CUST_ID");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("datetime")
                        .HasColumnName("LAST_ACTIVITY_DATE");

                    b.Property<int>("OpenBranchId")
                        .HasColumnType("int")
                        .HasColumnName("OPEN_BRANCH_ID");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("OPEN_DATE");

                    b.Property<int>("OpenEmpId")
                        .HasColumnType("int")
                        .HasColumnName("OPEN_EMP_ID");

                    b.Property<double?>("PendingBalance")
                        .HasColumnType("float")
                        .HasColumnName("PENDING_BALANCE");

                    b.Property<string>("ProductCd")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PRODUCT_CD");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("STATUS");

                    b.HasKey("AccountId");

                    b.HasIndex("CustId");

                    b.HasIndex("OpenBranchId");

                    b.HasIndex("OpenEmpId");

                    b.HasIndex("ProductCd");

                    b.ToTable("ACCOUNT");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BRANCH_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CITY");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NAME");

                    b.Property<string>("State")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("STATE");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("ZIP_CODE");

                    b.HasKey("BranchId");

                    b.ToTable("BRANCH");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Business", b =>
                {
                    b.Property<int>("CustId")
                        .HasColumnType("int")
                        .HasColumnName("CUST_ID");

                    b.Property<DateTime?>("IncorpDate")
                        .HasColumnType("datetime")
                        .HasColumnName("INCORP_DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("NAME");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("STATE_ID");

                    b.HasKey("CustId")
                        .HasName("PK__BUSINESS__93ABC0030AD2A005");

                    b.ToTable("BUSINESS");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Customer", b =>
                {
                    b.Property<int>("CustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CUST_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CITY");

                    b.Property<string>("CustTypeCd")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("CUST_TYPE_CD");

                    b.Property<string>("FedId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("FED_ID");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("POSTAL_CODE");

                    b.Property<string>("State")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("STATE");

                    b.HasKey("CustId")
                        .HasName("PK__CUSTOMER__93ABC0030EA330E9");

                    b.ToTable("CUSTOMER");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DEPT_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("NAME");

                    b.HasKey("DeptId")
                        .HasName("PK__DEPARTME__512A59AC1273C1CD");

                    b.ToTable("DEPARTMENT");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EMP_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedBranchId")
                        .HasColumnType("int")
                        .HasColumnName("ASSIGNED_BRANCH_ID");

                    b.Property<int?>("DeptId")
                        .HasColumnType("int")
                        .HasColumnName("DEPT_ID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("END_DATE");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("LAST_NAME");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("START_DATE");

                    b.Property<int?>("SuperiorEmpId")
                        .HasColumnType("int")
                        .HasColumnName("SUPERIOR_EMP_ID");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TITLE");

                    b.HasKey("EmpId")
                        .HasName("PK__EMPLOYEE__16EBFA26164452B1");

                    b.HasIndex("AssignedBranchId");

                    b.HasIndex("DeptId");

                    b.HasIndex("SuperiorEmpId");

                    b.ToTable("EMPLOYEE");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Individual", b =>
                {
                    b.Property<int>("CustId")
                        .HasColumnType("int")
                        .HasColumnName("CUST_ID");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("LAST_NAME");

                    b.HasKey("CustId")
                        .HasName("PK__INDIVIDU__93ABC0031A14E395");

                    b.ToTable("INDIVIDUAL");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Officer", b =>
                {
                    b.Property<int>("OfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OFFICER_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustId")
                        .HasColumnType("int")
                        .HasColumnName("CUST_ID");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("END_DATE");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("FIRST_NAME");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("LAST_NAME");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("START_DATE");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("TITLE");

                    b.HasKey("OfficerId");

                    b.HasIndex("CustId");

                    b.ToTable("OFFICER");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Product", b =>
                {
                    b.Property<string>("ProductCd")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("PRODUCT_CD");

                    b.Property<DateTime?>("DateOffered")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_OFFERED");

                    b.Property<DateTime?>("DateRetired")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_RETIRED");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.Property<string>("ProductTypeCd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PRODUCT_TYPE_CD");

                    b.HasKey("ProductCd")
                        .HasName("PK__PRODUCT__52B466A421B6055D");

                    b.HasIndex("ProductTypeCd");

                    b.ToTable("PRODUCT");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.ProductType", b =>
                {
                    b.Property<string>("ProductTypeCd")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PRODUCT_TYPE_CD");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAME");

                    b.HasKey("ProductTypeCd")
                        .HasName("PK__PRODUCT___A60F3DC925869641");

                    b.ToTable("PRODUCT_TYPE");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.AccTransaction", b =>
                {
                    b.HasOne("DepartmentStore.API.Data.Account", "Account")
                        .WithMany("AccTransactions")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("ACC_TRANSACTION_ACCOUNT_FK");

                    b.HasOne("DepartmentStore.API.Data.Branch", "ExecutionBranch")
                        .WithMany("AccTransactions")
                        .HasForeignKey("ExecutionBranchId")
                        .HasConstraintName("ACC_TRANSACTION_BRANCH_FK");

                    b.HasOne("DepartmentStore.API.Data.Employee", "TellerEmp")
                        .WithMany("AccTransactions")
                        .HasForeignKey("TellerEmpId")
                        .HasConstraintName("ACC_TRANSACTION_EMPLOYEE_FK");

                    b.Navigation("Account");

                    b.Navigation("ExecutionBranch");

                    b.Navigation("TellerEmp");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Account", b =>
                {
                    b.HasOne("DepartmentStore.API.Data.Customer", "Cust")
                        .WithMany("Accounts")
                        .HasForeignKey("CustId")
                        .HasConstraintName("ACCOUNT_CUSTOMER_FK");

                    b.HasOne("DepartmentStore.API.Data.Branch", "OpenBranch")
                        .WithMany("Accounts")
                        .HasForeignKey("OpenBranchId")
                        .HasConstraintName("ACCOUNT_BRANCH_FK")
                        .IsRequired();

                    b.HasOne("DepartmentStore.API.Data.Employee", "OpenEmp")
                        .WithMany("Accounts")
                        .HasForeignKey("OpenEmpId")
                        .HasConstraintName("ACCOUNT_EMPLOYEE_FK")
                        .IsRequired();

                    b.HasOne("DepartmentStore.API.Data.Product", "ProductCdNavigation")
                        .WithMany("Accounts")
                        .HasForeignKey("ProductCd")
                        .HasConstraintName("ACCOUNT_PRODUCT_FK")
                        .IsRequired();

                    b.Navigation("Cust");

                    b.Navigation("OpenBranch");

                    b.Navigation("OpenEmp");

                    b.Navigation("ProductCdNavigation");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Business", b =>
                {
                    b.HasOne("DepartmentStore.API.Data.Customer", "Cust")
                        .WithOne("Business")
                        .HasForeignKey("DepartmentStore.API.Data.Business", "CustId")
                        .HasConstraintName("BUSINESS_EMPLOYEE_FK")
                        .IsRequired();

                    b.Navigation("Cust");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Employee", b =>
                {
                    b.HasOne("DepartmentStore.API.Data.Branch", "AssignedBranch")
                        .WithMany("Employees")
                        .HasForeignKey("AssignedBranchId")
                        .HasConstraintName("EMPLOYEE_BRANCH_FK");

                    b.HasOne("DepartmentStore.API.Data.Department", "Dept")
                        .WithMany("Employees")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("EMPLOYEE_DEPARTMENT_FK");

                    b.HasOne("DepartmentStore.API.Data.Employee", "SuperiorEmp")
                        .WithMany("InverseSuperiorEmp")
                        .HasForeignKey("SuperiorEmpId")
                        .HasConstraintName("EMPLOYEE_EMPLOYEE_FK");

                    b.Navigation("AssignedBranch");

                    b.Navigation("Dept");

                    b.Navigation("SuperiorEmp");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Individual", b =>
                {
                    b.HasOne("DepartmentStore.API.Data.Customer", "Cust")
                        .WithOne("Individual")
                        .HasForeignKey("DepartmentStore.API.Data.Individual", "CustId")
                        .HasConstraintName("INDIVIDUAL_CUSTOMER_FK")
                        .IsRequired();

                    b.Navigation("Cust");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Officer", b =>
                {
                    b.HasOne("DepartmentStore.API.Data.Customer", "Cust")
                        .WithMany("Officers")
                        .HasForeignKey("CustId")
                        .HasConstraintName("OFFICER_CUSTOMER_FK");

                    b.Navigation("Cust");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Product", b =>
                {
                    b.HasOne("DepartmentStore.API.Data.ProductType", "ProductTypeCdNavigation")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeCd")
                        .HasConstraintName("PRODUCT_PRODUCT_TYPE_FK");

                    b.Navigation("ProductTypeCdNavigation");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Account", b =>
                {
                    b.Navigation("AccTransactions");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Branch", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AccTransactions");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Customer", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Business");

                    b.Navigation("Individual");

                    b.Navigation("Officers");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Employee", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AccTransactions");

                    b.Navigation("InverseSuperiorEmp");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.Product", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("DepartmentStore.API.Data.ProductType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
